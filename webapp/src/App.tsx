import React, { useEffect, useState, useMemo } from 'react';
import './App.css';
import WebApp from '@twa-dev/sdk';

const tg = WebApp;
tg.ready();
tg.expand();

const API_URL = 'http://127.0.0.1:8000';

function getUserIdFromTelegram(): number {
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ Telegram WebApp initDataUnsafe
    // @ts-ignore
    const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
    if (tgUser && tgUser.id) return tgUser.id;
    // @ts-ignore
    if (tg.initDataUnsafe && tg.initDataUnsafe.user && tg.initDataUnsafe.user.id) return tg.initDataUnsafe.user.id;
  } catch {}
  return 1; // fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
}

const USER_ID = getUserIdFromTelegram();

type Upgrade = {
  name: string;
  cost: number;
  desc: string;
};

function getSmokePerClick(upgrades: string[]): number {
  let base = 1;
  if (upgrades.includes('üî• –£–≥–æ–ª—å –ø–æ–ª—É—á—à–µ')) base += 1;
  if (upgrades.includes('üçè –Ø–±–ª–æ—á–Ω—ã–π —Ç–∞–±–∞–∫')) base += 3;
  return base;
}

function App() {
  const [smoke, setSmoke] = useState(0);
  const [shopOpen, setShopOpen] = useState(false);
  const [upgrades, setUpgrades] = useState<string[]>([]);
  const [shopItems, setShopItems] = useState<Upgrade[]>([]);
  const [loading, setLoading] = useState(true);

  const smokePerClick = useMemo(() => getSmokePerClick(upgrades), [upgrades]);

  // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–ø–≥—Ä–µ–π–¥—ã
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      const userRes = await fetch(`${API_URL}/user/${USER_ID}`);
      const user = await userRes.json();
      setSmoke(user.smoke);
      setUpgrades(user.upgrades ? user.upgrades.split(',') : []);
      const shopRes = await fetch(`${API_URL}/shop`);
      const shop = await shopRes.json();
      setShopItems(shop);
      setLoading(false);
    };
    fetchData();
  }, []);

  // –ê–≤—Ç–æ–∫–∞–ª—å—è–Ω: –µ—Å–ª–∏ –∫—É–ø–ª–µ–Ω, –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É +1 –¥—ã–º
  useEffect(() => {
    if (!upgrades.includes('ü§ñ –ê–≤—Ç–æ–∫–∞–ª—å—è–Ω')) return;
    const interval = setInterval(() => {
      setSmoke(prev => {
        const newSmoke = prev + 1;
        fetch(`${API_URL}/user/smoke`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ user_id: USER_ID, smoke: newSmoke })
        });
        return newSmoke;
      });
    }, 60000); // 1 –º–∏–Ω—É—Ç–∞
    return () => clearInterval(interval);
  }, [upgrades]);

  // –ö–ª–∏–∫–µ—Ä: —É–≤–µ–ª–∏—á–∏—Ç—å –¥—ã–º –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ backend
  const handleSmoke = async () => {
    const newSmoke = smoke + smokePerClick;
    setSmoke(newSmoke);
    tg.HapticFeedback?.impactOccurred('medium');
    await fetch(`${API_URL}/user/smoke`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: USER_ID, smoke: newSmoke })
    });
  };

  // –ü–æ–∫—É–ø–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞
  const handleBuy = async (idx: number) => {
    const res = await fetch(`${API_URL}/shop/buy`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: USER_ID, upgrade_idx: idx })
    });
    if (res.ok) {
      // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      const userRes = await fetch(`${API_URL}/user/${USER_ID}`);
      const user = await userRes.json();
      setSmoke(user.smoke);
      setUpgrades(user.upgrades ? user.upgrades.split(',') : []);
    } else {
      const err = await res.json();
      alert(err.detail || '–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏');
    }
  };

  return (
    <div className="App">
      <header className="header">
        <span role="img" aria-label="hookah" style={{fontSize: 32}}>üí®</span>
        <h1>–ö–∞–ª—å—è–Ω –ö–ª–∏–∫–µ—Ä</h1>
      </header>
      {loading ? (
        <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : (
        <>
          <div className="counter-block">
            <div className="smoke-count">{smoke} <span role="img" aria-label="smoke">üí®</span></div>
            <button className="smoke-btn" onClick={handleSmoke}>
              –ö—É—Ä–∏—Ç—å –∫–∞–ª—å—è–Ω (+{smokePerClick})
            </button>
          </div>
          <button className="shop-btn" onClick={() => setShopOpen(true)}>
            üõí –ú–∞–≥–∞–∑–∏–Ω
          </button>
          {shopOpen && (
            <div className="shop-modal">
              <div className="shop-content">
                <h2>–ú–∞–≥–∞–∑–∏–Ω –∞–ø–≥—Ä–µ–π–¥–æ–≤</h2>
                <ul>
                  {shopItems.map((item, idx) => (
                    <li key={item.name} style={{marginBottom: 8}}>
                      <b>{item.name}</b> ‚Äî {item.cost}üí®<br/>
                      <i>{item.desc}</i><br/>
                      {upgrades.includes(item.name) ? (
                        <span style={{color: 'green'}}>–ö—É–ø–ª–µ–Ω–æ ‚úÖ</span>
                      ) : (
                        <button onClick={() => handleBuy(idx)} disabled={smoke < item.cost}>
                          –ö—É–ø–∏—Ç—å
                        </button>
                      )}
                    </li>
                  ))}
                </ul>
                <button onClick={() => setShopOpen(false)}>–ó–∞–∫—Ä—ã—Ç—å</button>
              </div>
            </div>
          )}
        </>
      )}
      <footer className="footer">
        <span>by Hookah Clicker</span>
      </footer>
    </div>
  );
}

export default App;
